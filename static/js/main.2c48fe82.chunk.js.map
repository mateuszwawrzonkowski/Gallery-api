{"version":3,"sources":["theme/globalStyles.js","theme/mainTheme.js","components/Header/Header.js","components/GalleryItems/GalleryItems.js","components/Button/Button.js","theme/keyframes.js","components/Spinner/Spinner.js","components/Gallery/Gallery.js","App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","theme","buttonBackground","fontColor","spinner","normal","medium","bold","Wrapper","styled","header","Title","h1","Header","PhotosWrapper","div","Photo","img","GalleryItems","data","start","end","slug","url","imageLink","i","length","push","reverse","join","slice","map","item","key","id","href","download_url","target","rel","src","defaultProps","Btn","button","ArrowIcon","FontAwesomeIcon","Button","icon","onClick","rotate360","keyframes","Spinner","initialState","page","buttonIcons","arrow","faArrowLeft","type","faArrowRight","ButtonsWrapper","Counter","p","Gallery","useState","photos","setPhotos","isLoaded","setIsLoaded","useReducer","state","action","Error","dispatch","useEffect","fetch","then","resp","json","buttons","MainWrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2c48fe82.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    *,\r\n    *::before,\r\n    *::after {\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    margin:0;\r\n    padding: 0;\r\n    }\r\n\r\n    html {\r\n    font-size: 62.5%;\r\n    box-sizing: border-box;\r\n    overflow-x: hidden;\r\n    }\r\n\r\n    body {\r\n    font-size: 1.6rem;\r\n    margin: 0;\r\n    font-family: \"Montserrat\", sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    background: linear-gradient(140deg, rgba(120,161,187,1) 0%, rgba(244,223,231,1) 100%);\r\n    }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","export const theme = {\r\n  buttonBackground: 'linear-gradient(to right,  #52A0FD 0%, #00e2fa 80%,#00e2fa 100%)',\r\n  fontColor: '#EBF5EE',\r\n  spinner: 'white',\r\n  normal: 400,\r\n  medium: 500,\r\n  bold: 700,\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.header`\r\n display: flex;\r\n justify-content: center;\r\n flex-basis: 100%;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  text-transform: uppercase;\r\n  color: ${({ theme }) => theme.fontColor};\r\n  letter-spacing: 2px;\r\n  font-size: 5rem;\r\n  text-shadow: 1px 1px 4px #333;\r\n  \r\n  @media (min-width: 768px) {\r\n    margin-bottom: 100px;\r\n  }\r\n`;\r\n\r\nconst Header = () => (\r\n  <Wrapper>\r\n    <Title>Gallery</Title>\r\n  </Wrapper>\r\n);\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst PhotosWrapper = styled.div`\r\n    flex-basis: 100%;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-around;\r\n`;\r\n\r\nconst Photo = styled.img`\r\n    height: 200px;\r\n    width: 200px;\r\n    margin: 10px;\r\n    object-fit: cover;\r\n    box-shadow: 0px 6px 10px 0px rgba(0,0,0,0.8);\r\n    transition: 0.4s;\r\n\r\n    :hover{\r\n        filter: brightness(120%);\r\n    }\r\n    \r\n    @media (min-width: 768px) {\r\n        height: 400px;\r\n        width: 400px;\r\n    }\r\n`;\r\n\r\nconst GalleryItems = ({ data, start, end }) => {\r\n  const slug = (url) => {\r\n    const imageLink = [];\r\n    for (let i = url.length; i >= 0; i -= 1) {\r\n      if (url[i] === '/') {\r\n        break;\r\n      } else {\r\n        imageLink.push(url[i]);\r\n      }\r\n    }\r\n    return imageLink.reverse().join('');\r\n  };\r\n\r\n  return (\r\n    <PhotosWrapper>\r\n      {data.slice(start, end).map((item) => (\r\n        <a\r\n          key={item.id}\r\n          href={`${item.download_url}`}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Photo\r\n            src={`http://source.unsplash.com/${slug(item.url)}`}\r\n          />\r\n        </a>\r\n      ))}\r\n    </PhotosWrapper>\r\n\r\n  );\r\n};\r\n\r\nGalleryItems.propTypes = {\r\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  start: PropTypes.number,\r\n  end: PropTypes.number,\r\n};\r\n\r\nGalleryItems.defaultProps = {\r\n  start: 0,\r\n  end: 3,\r\n};\r\n\r\nexport default GalleryItems;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Btn = styled.button`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100px;\r\n    height: 30px;\r\n    color: white;\r\n    margin: 20px 40px;\r\n    text-transform: uppercase;\r\n    border-radius: 20px;\r\n    background: ${({ theme }) => theme.buttonBackground};\r\n    font-size: 2.1rem;\r\n    border: none;\r\n    outline: none;\r\n    cursor: pointer;\r\n    box-shadow:0px 6px 10px 0px rgba(0,0,0,0.5);\r\n        :active{\r\n            box-shadow: inset 0 0 8px black;\r\n        }\r\n    @media (min-width: 768px) {\r\n        width: 150px;\r\n        height: 40px;\r\n  }\r\n`;\r\n\r\nconst ArrowIcon = styled(FontAwesomeIcon)`\r\n    font-size: 3rem;\r\n`;\r\n\r\nconst Button = ({ icon, onClick }) => (\r\n  <Btn onClick={onClick}>\r\n    <ArrowIcon icon={icon} />\r\n  </Btn>\r\n);\r\n\r\nButton.propTypes = {\r\n  icon: PropTypes.oneOfType([PropTypes.object]).isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Button;\r\n","import { keyframes } from 'styled-components';\r\n\r\nexport const rotate360 = keyframes`\r\n  from {\r\n    transform: rotate(0deg);\r\n  }\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n`;\r\n","import styled from 'styled-components';\r\nimport { rotate360 } from 'theme/keyframes';\r\n\r\nconst Spinner = styled.div`\r\nanimation: ${rotate360} 1s linear infinite;\r\ntransform: translateZ(0);\r\nborder-top: 3px solid white;\r\nborder-right: 3px solid white;\r\nborder-bottom: 3px solid white;\r\nborder-left: 6px solid ${({ theme }) => theme.spinner};;\r\nbackground: transparent;\r\nwidth: 64px;\r\nheight: 64px;\r\nborder-radius: 50%;\r\n`;\r\n\r\nexport default Spinner;\r\n","import React, { useEffect, useState, useReducer } from 'react';\r\nimport styled from 'styled-components';\r\nimport GalleryItems from 'components/GalleryItems/GalleryItems';\r\nimport Button from 'components/Button/Button';\r\nimport Spinner from 'components/Spinner/Spinner';\r\nimport { faArrowRight, faArrowLeft } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst initialState = { start: 0, end: 3, page: 1 };\r\n\r\nconst buttonIcons = [\r\n  {\r\n    id: 1,\r\n    arrow: faArrowLeft,\r\n    type: 'previous',\r\n  },\r\n  {\r\n    id: 2,\r\n    arrow: faArrowRight,\r\n    type: 'next',\r\n  },\r\n];\r\n\r\nconst Wrapper = styled.div`\r\n    position: relative;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    max-width:100%;\r\n`;\r\n\r\nconst ButtonsWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    max-width:90%;\r\n`;\r\n\r\nconst Counter = styled.p`\r\n    position: absolute;\r\n    bottom: 15px;\r\n    left: 50%;\r\n    transform:translateX(-50%);\r\n    color: white;\r\n    text-shadow: 2px 2px 4px #000000;\r\n    font-size: 2.6rem;\r\n    padding: 10px;\r\n    text-align: center;\r\n`;\r\n\r\nconst Gallery = () => {\r\n  const [photos, setPhotos] = useState([]);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  function reducer(state, action) {\r\n    switch (action.type) {\r\n      case 'next':\r\n        if (state.end >= photos.length) { return { start: 0, end: 3, page: 1 }; }\r\n        return { start: state.start + 3, end: state.end + 3, page: state.page + 1 };\r\n      case 'previous':\r\n        if (state.start <= 0) { return { start: 27, end: 30, page: 10 }; }\r\n        return { start: state.start - 3, end: state.end - 3, page: state.page - 1 };\r\n      default:\r\n        throw new Error('Reducer action.type error');\r\n    }\r\n  }\r\n\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  useEffect(() => {\r\n    fetch('https://picsum.photos/v2/list')\r\n      .then((resp) => resp.json())\r\n      .then((data) => setPhotos(data))\r\n      .then(() => {\r\n        setIsLoaded(true);\r\n      });\r\n  }, []);\r\n\r\n  const buttons = buttonIcons.map((item) => (\r\n    <Button key={item.id} icon={item.arrow} onClick={() => dispatch({ type: item.type })} />\r\n  ));\r\n\r\n  return (\r\n\r\n    <>\r\n      <Wrapper>\r\n        {isLoaded ? (\r\n          <>\r\n            <GalleryItems data={photos} start={state.start} end={state.end} />\r\n            <ButtonsWrapper>\r\n              {buttons}\r\n            </ButtonsWrapper>\r\n            <Counter>\r\n              {`${state.page}/10`}\r\n            </Counter>\r\n          </>\r\n        )\r\n          : (<Spinner />)}\r\n      </Wrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Gallery;\r\n","import React from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\nimport GlobalStyle from 'theme/globalStyles';\nimport { theme } from 'theme/mainTheme';\nimport Header from 'components/Header/Header';\nimport Gallery from 'components/Gallery/Gallery';\n\nconst MainWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-content: center;\n  width: 100%;\n  min-height: 100vh;\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ThemeProvider theme={theme}>\n        <MainWrapper>\n          <Header />\n          <Gallery />\n        </MainWrapper>\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}